/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include "mb_interface.h"
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xbasic_types.h"
#include "xgpio.h"
#include "xuartlite.h"
#include "xspi.h"

#define GPIO_DEV_ID XPAR_GENERIC_GPIO_DEVICE_ID
#define SPI_DEV_ID XPAR_SPI_0_DEVICE_ID

XGpio GPIO_INST;
XSpi SPI_INST;
XStatus Status;

u8 set_op_format[3]={0x00,0x14,0x11}; // sets output format
u8 sel_ch_a[3]= {0x00,0x05,0x01}; //selects channel A
u8 set_off[3]={0x00,0x10,0x02}; //sets channel A ADC offset to +2
u8 set_tf[3]={0x00,0xFF,0x01}; // sets transfer register to set the memory map registers from temp registers.


void Init_GPIO(void);
void initialize_spi(void);
void SPI_Transfer(u8 SendBufr, u8 RecvBufr);

int main()
{
    init_platform();

    print("Hello World\n\r");

    return 0;
}

void initialize_spi(void)
{
		Status = XSpi_Initialize(&SPI_INST , SPI_DEV_ID );
			if (Status == XST_SUCCESS)
				{xil_printf("Successfully initialised SPI \n\r");}
			else
				{xil_printf("Failure!!! \n\r");}



		Status = XSpi_SetOptions(&SPI_INST, XSP_MASTER_OPTION );
			if (Status == XST_SUCCESS)
				{xil_printf("Successfully set SPI as master \n\r");}
			else
				{xil_printf("Failed to set SPI in master mode ! \n\r");}

}

void Init_GPIO(void)
{
	xil_printf("Entering GPIO Initialization Loop \n\r");

//Initialize GPIO
	Status = XGpio_Initialize(&GPIO_INST , GPIO_DEV_ID );
    			if (Status == XST_SUCCESS)
    				{xil_printf("Successfully initialized GPIO \n\r");}
    			else
    				{xil_printf("Failure!!! \n\r");}

    XGpio_SetDataDirection(&GPIO_INST, 1 ,0x00);


xil_printf("GPIO INITIALIZATION COMPLETE \n\r");
}
