////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.5
//  \   \         Application : sch2hdl
//  /   /         Filename : sing_chan_cap.vf
// /___/   /\     Timestamp : 06/02/2016 09:30:52
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath E:/xillybus_adc_capture/adc_capture/ipcore_dir -intstyle ise -family virtex5 -verilog E:/xillybus_adc_capture/adc_capture/sing_chan_cap.vf -w E:/xillybus_adc_capture/adc_capture/sing_chan_cap.sch
//Design Name: sing_chan_cap
//Device: virtex5
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module IFD8_HXILINX_sing_chan_cap(Q, C, D);

   
   output [7:0]       Q;

   input 	      C;	
   input  [7:0]       D;
   
   reg    [7:0]       Q;

    (* IOB = "TRUE" *)
   
   always @(posedge C)
     begin
          Q <= D;
     end
   
   
endmodule
`timescale 1ns / 1ps

module sing_chan_cap(dco_n, 
                     dco_p, 
                     d_n2, 
                     d_n3, 
                     d_n4, 
                     d_n5, 
                     d_n6, 
                     d_n7, 
                     d_p2, 
                     d_p3, 
                     d_p4, 
                     d_p5, 
                     d_p6, 
                     d_p7, 
                     fifo_rst, 
                     PCIE_PERST_B_LS, 
                     PCIE_REFCLK_N, 
                     PCIE_REFCLK_P, 
                     PCIE_RX0_N, 
                     PCIE_RX0_P, 
                     GPIO_LED, 
                     locked, 
                     PCIE_TX0_N, 
                     PCIE_TX0_P, 
                     quiesce);

    input dco_n;
    input dco_p;
    input d_n2;
    input d_n3;
    input d_n4;
    input d_n5;
    input d_n6;
    input d_n7;
    input d_p2;
    input d_p3;
    input d_p4;
    input d_p5;
    input d_p6;
    input d_p7;
    input fifo_rst;
    input PCIE_PERST_B_LS;
    input PCIE_REFCLK_N;
    input PCIE_REFCLK_P;
    input PCIE_RX0_N;
    input PCIE_RX0_P;
   output [3:0] GPIO_LED;
   output locked;
   output PCIE_TX0_N;
   output PCIE_TX0_P;
   output quiesce;
   
   wire dclk;
   wire pcie_ref_clk;
   wire [7:0] XLXN_21;
   wire [7:0] XLXN_22;
   wire XLXN_24;
   wire XLXN_26;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_66;
   wire XLXN_67;
   wire XLXN_68;
   wire [31:0] XLXN_69;
   wire [31:0] XLXN_70;
   
   assign XLXN_67 = 0;
   assign XLXN_68 = 0;
   (* IOSTANDARD = "DEFAULT" *) 
   IBUFDS #( .DIFF_TERM("FALSE") ) pcieclk_ibuf (.I(PCIE_REFCLK_P), 
                        .IB(PCIE_REFCLK_N), 
                        .O(pcie_ref_clk));
   xillybus  xillybus_ins (.PCIE_PERST_B_LS(PCIE_PERST_B_LS), 
                          .pcie_ref_clk(pcie_ref_clk), 
                          .PCIE_RX0_N(PCIE_RX0_N), 
                          .PCIE_RX0_P(PCIE_RX0_P), 
                          .user_r_mem_8_data(), 
                          .user_r_mem_8_empty(), 
                          .user_r_mem_8_eof(), 
                          .user_r_read_8_data(), 
                          .user_r_read_8_empty(), 
                          .user_r_read_8_eof(), 
                          .user_r_read_32_data(XLXN_70[31:0]), 
                          .user_r_read_32_empty(XLXN_32), 
                          .user_r_read_32_eof(), 
                          .user_w_mem_8_full(), 
                          .user_w_write_8_full(), 
                          .user_w_write_32_full(), 
                          .bus_clk(XLXN_33), 
                          .GPIO_LED(GPIO_LED[3:0]), 
                          .PCIE_TX0_N(PCIE_TX0_N), 
                          .PCIE_TX0_P(PCIE_TX0_P), 
                          .quiesce(quiesce), 
                          .user_mem_8_addr(), 
                          .user_mem_8_addr_update(), 
                          .user_r_mem_8_open(), 
                          .user_r_mem_8_rden(), 
                          .user_r_read_8_open(), 
                          .user_r_read_8_rden(), 
                          .user_r_read_32_open(), 
                          .user_r_read_32_rden(XLXN_34), 
                          .user_w_mem_8_data(), 
                          .user_w_mem_8_open(), 
                          .user_w_mem_8_wren(), 
                          .user_w_write_8_data(), 
                          .user_w_write_8_open(), 
                          .user_w_write_8_wren(), 
                          .user_w_write_32_data(), 
                          .user_w_write_32_open(), 
                          .user_w_write_32_wren());
   Busmaker  XLXI_1 (.d0(XLXN_66), 
                    .d1(XLXN_65), 
                    .d2(XLXN_64), 
                    .d3(XLXN_63), 
                    .d4(XLXN_62), 
                    .d5(XLXN_61), 
                    .d6(XLXN_68), 
                    .d7(XLXN_67), 
                    .Data_Bus(XLXN_21[7:0]));
   adc_8_fifo  XLXI_2 (.din(XLXN_22[7:0]), 
                      .rd_clk(XLXN_33), 
                      .rd_en(XLXN_34), 
                      .rst(fifo_rst), 
                      .wr_clk(dclk), 
                      .wr_en(XLXN_24), 
                      .dout(XLXN_69[31:0]), 
                      .empty(XLXN_32), 
                      .full());
   capture_control  XLXI_3 (.dclk(XLXN_26), 
                           .dv(XLXN_24));
   data_clk  XLXI_4 (.CLKIN_N_IN(dco_n), 
                    .CLKIN_P_IN(dco_p), 
                    .RST_IN(), 
                    .CLKIN_IBUFGDS_OUT(), 
                    .CLKOUT0_OUT(XLXN_26), 
                    .LOCKED_OUT(locked));
   (* IOSTANDARD = "DEFAULT" *) 
   IBUFDS #( .DIFF_TERM("FALSE") ) XLXI_5 (.I(d_p7), 
                  .IB(d_n7), 
                  .O(XLXN_61));
   (* IOSTANDARD = "DEFAULT" *) 
   IBUFDS #( .DIFF_TERM("FALSE") ) XLXI_6 (.I(d_p6), 
                  .IB(d_n6), 
                  .O(XLXN_62));
   (* IOSTANDARD = "DEFAULT" *) 
   IBUFDS #( .DIFF_TERM("FALSE") ) XLXI_7 (.I(d_p5), 
                  .IB(d_n5), 
                  .O(XLXN_63));
   (* IOSTANDARD = "DEFAULT" *) 
   IBUFDS #( .DIFF_TERM("FALSE") ) XLXI_8 (.I(d_p4), 
                  .IB(d_n4), 
                  .O(XLXN_64));
   (* IOSTANDARD = "DEFAULT" *) 
   IBUFDS #( .DIFF_TERM("FALSE") ) XLXI_9 (.I(d_p3), 
                  .IB(d_n3), 
                  .O(XLXN_65));
   (* IOSTANDARD = "DEFAULT" *) 
   IBUFDS #( .DIFF_TERM("FALSE") ) XLXI_10 (.I(d_p2), 
                   .IB(d_n2), 
                   .O(XLXN_66));
   (* HU_SET = "XLXI_13_0" *) 
   IFD8_HXILINX_sing_chan_cap  XLXI_13 (.C(XLXN_26), 
                                       .D(XLXN_21[7:0]), 
                                       .Q(XLXN_22[7:0]));
   INV  XLXI_14 (.I(XLXN_26), 
                .O(dclk));
   byte_reorder  XLXI_15 (.data_in(XLXN_69[31:0]), 
                         .data_out(XLXN_70[31:0]));
endmodule
